/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>

// layers ID definition
#define DEF     0
#define DEF_OSX 1
#define DEF_QWE 2
#define VIM     3
#define NAV     4
#define NAV_RGT 5
#define NAV_OSX 6
#define SYM     7
#define NUM     8
#define FUN     9
#define MOU    10
#define SYS    11

// macros definition
#define meh      LC(LS(LALT))
#define hyper    LG(LC(LS(LALT)))
#define deg      RA(LS(SEMI))
#define prev_tab LS(LC(TAB))
#define next_tab LC(TAB)

// OSX specific macros
#define copy_OSX        LG(C)
#define paste_OSX       LG(V)
#define undo_OSX        LG(Z)
#define redo_OSX        LG(LS(Z))
#define new_tab_OSX     LG(T)
#define close_win_OSX   LG(W)
#define prev_screen_OSX LC(LEFT)
#define next_screen_OSX LC(RIGHT)
#define prev_page_OSX   LG(LBKT)
#define next_page_OSX   LG(RBKT)

// Windows/Linux specific macros
#define copy        LC(C)
#define paste       LC(V)
#define undo        LC(Z)
#define redo        LC(LS(Z))
#define new_tab     LC(T)
#define close_win   LC(W)
#define prev_screen LC(LG(LEFT))
#define next_screen LC(LG(RIGHT))
#define prev_page   LC(LBKT)
#define next_page   LC(RBKT)

// Vim-specific definition
#define TOG_VIM_KEY(key,...) \
    ZMK_MACRO(tog_vim_##key, \
        wait-ms = <0>; \
        tap-ms = <40>; \
        bindings = <&tog VIM &kp key>; \
        __VA_ARGS__ \
    )
#define TOG_VIM_KEY_NOCTRL(key) \
    tog_vim_noc_##key: tog_vim_noc_##key { \
            label = ZMK_MACRO_STRINGIFY(ZM_TOG_VIM_NOC_ ## key); \
            compatible = "zmk,behavior-mod-morph"; \
            #binding-cells = <0>; \
            bindings = <&tog_vim_##key>, <&kp key>; \
            mods = <(MOD_LCTL|MOD_RCTL)>; \
            keep-mods = <(MOD_LCTL|MOD_RCTL)>; \
        };

&sk {
    release-after-ms = <1000>;
};
&sl {
    release-after-ms = <2000>;
};

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        nav_osx_layer {
            if-layers = <DEF_OSX NAV>;
            then-layer = <NAV_OSX>;
        };
        num_layer {
            if-layers = <NAV SYM>;
            then-layer = <NUM>;
        };
        num_right_layer {
            if-layers = <NAV_RGT SYM>;
            then-layer = <NUM>;
        };
        num_osx_layer {
            if-layers = <NAV_OSX SYM>;
            then-layer = <NUM>;
        };
        mouse_layer {
            if-layers = <NAV NAV_RGT>;
            then-layer = <MOU>;
        };
    };

    macros {
        // esc_space: esc_space {
        //     label = "ZM_esc_space";
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     bindings
        //         = <&macro_press &kp ESC>
        //         , <&macro_tap &kp SPACE>
        //         , <&macro_release &kp ESC>
        //         ;
        // };
        next_win: next_win {
            label = "ZM_next_win";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LALT>
                , <&macro_tap &kp TAB>
                , <&macro_pause_for_layer>
                , <&macro_release &kp LALT>
                ;
        };
        next_app: next_app {
            label = "ZM_next_app";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp RGUI>
                , <&macro_tap &kp TAB>
                , <&macro_pause_for_layer>
                , <&macro_release &kp RGUI>
                ;
        };
        next_app_win: next_app_win {
            label = "ZM_next_app_win";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp RGUI>
                , <&macro_tap &kp GRAVE>
                , <&macro_pause_for_layer>
                , <&macro_release &kp RGUI>
                ;
        };
        pluseq: pluseq {
            label = "ZM_plus_equals";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp PLUS>
                , <&macro_tap &kp EQUAL>
                ;
        };

        // vim macros
        TOG_VIM_KEY(SPACE)
        TOG_VIM_KEY(COLON)
        TOG_VIM_KEY(FSLH)
        TOG_VIM_KEY(A)
        TOG_VIM_KEY(S)
        TOG_VIM_KEY(C)
        ZMK_MACRO(hunk_stage,
            wait-ms = <30>;
            tap-ms = <40>;
            bindings = <&kp SPACE &kp H &kp S>;
        )
        ZMK_MACRO(hunk_preview,
            wait-ms = <30>;
            tap-ms = <40>;
            bindings = <&kp SPACE &kp H &kp P>;
        )
    };

    behaviors {
        // bspc_del: backspace_delete {
        //     compatible = "zmk,behavior-mod-morph";
        //     label = "BACKSPACE_DELETE";
        //     #binding-cells = <0>;
        //     bindings = <&kp BACKSPACE>, <&kp DELETE>;
        //     mods = <(MOD_LSFT|MOD_RSFT)>;
        //     keep-mods = <(MOD_RSFT)>;
        // };
        comma_dqt: comma_double_quote {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_DOUBLE_QUOTE";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp DQT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };
        dot_sqt: dot_single_quote {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_SINGLE_QUOTE";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp SQT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };
        // comma_sqt: comma_single_quote {
        //     compatible = "zmk,behavior-mod-morph";
        //     label = "COMMA_SINGLE_QUOTE";
        //     #binding-cells = <0>;
        //     bindings = <&kp COMMA>, <&kp SQT>;
        //     mods = <(MOD_LSFT|MOD_RSFT)>;
        //     keep-mods = <(MOD_RSFT)>;
        // };
        // dot_dqt: dot_double_quote {
        //     compatible = "zmk,behavior-mod-morph";
        //     label = "DOT_DOUBLE_QUOTE";
        //     #binding-cells = <0>;
        //     bindings = <&kp DOT>, <&kp DQT>;
        //     mods = <(MOD_LSFT|MOD_RSFT)>;
        //     keep-mods = <(MOD_RSFT)>;
        // };
        undo_w: undo_w {
            compatible = "zmk,behavior-mod-morph";
            label = "UNDO_W";
            #binding-cells = <0>;
            bindings = <&kp undo>, <&kp W>;
            mods = <(MOD_RGUI)>;
            keep-mods = <(MOD_RGUI)>;
        };
        redo_q: redo_q {
            compatible = "zmk,behavior-mod-morph";
            label = "REDO_Q";
            #binding-cells = <0>;
            bindings = <&kp redo>, <&kp Q>;
            mods = <(MOD_RGUI)>;
            keep-mods = <(MOD_RGUI)>;
        };
        undo_w_osx: undo_w_osx {
            compatible = "zmk,behavior-mod-morph";
            label = "UNDO_W_OSX";
            #binding-cells = <0>;
            bindings = <&kp undo_OSX>, <&kp W>;
            mods = <(MOD_RGUI)>;
            keep-mods = <(MOD_RGUI)>;
        };
        redo_q_osx: redo_q_osx {
            compatible = "zmk,behavior-mod-morph";
            label = "REDO_Q_OSX";
            #binding-cells = <0>;
            bindings = <&kp redo_OSX>, <&kp Q>;
            mods = <(MOD_RGUI)>;
            keep-mods = <(MOD_RGUI)>;
        };

        // espmod: esc_space_mod {
        //     compatible = "zmk,behavior-hold-tap";
        //     label = "ESC_SPACE_MOD";
        //     #binding-cells = <2>;
        //     flavor = "hold-preferred";
        //     tapping-term-ms = <400>;
        //     quick-tap-ms = <200>;
        //     bindings = <&kp>, <&esc_space>;
        // };
        skht: sticky_key_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "STICKY_KEY_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            bindings = <&kp>, <&sk>;
        };
        lthp: layer_tap_hold_preferred {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_HOLD_PREFERRED";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&kp>;
        };
        ltb: layer_tap_balanced {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_BALANCED";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <150>;
            quick-tap-ms = <200>;
            bindings = <&mo>, <&kp>;
        };
        ltbr: layer_tap_balanced_repeat {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_BALANCED_REPEAT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <150>;
            bindings = <&mo>, <&key_repeat>;
        };
        htbr: hold_tap_balanced_repeat {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_BALANCED_REPEAT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            bindings = <&kp>, <&key_repeat>;
        };

        pc_connect: pc_connect{
            label = "ZM_PC_CONNECT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <100>;
            tap-ms = <5>;
            bindings = <&bt BT_SEL 1 &to DEF>;
        };
        osx_connect: osx_connect{
            label = "ZM_OSX_CONNECT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <100>;
            tap-ms = <5>;
            bindings = <&bt BT_SEL 0 &to DEF_OSX>;
        };

        // vim-specific bindings
        lttogsp: layer_tap_toggle_space {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TOGGLE_SPACE";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <150>;
            bindings = <&mo>, <&tog_vim_noc_SPACE>;
        };
        TOG_VIM_KEY_NOCTRL(SPACE)
        TOG_VIM_KEY_NOCTRL(FSLH)
        TOG_VIM_KEY_NOCTRL(A)
        TOG_VIM_KEY_NOCTRL(C)
        TOG_VIM_KEY_NOCTRL(S)
    };

    combos {
        compatible = "zmk,combos";
        combo_tab {
            // conflicts with Qwerty "we"
            key-positions = <2 3>;
            bindings = <&kp TAB>;
        };
        combo_esc {
            key-positions = <26 27>;
            bindings = <&kp ESC>;
        };
        combo_vim {
            key-positions = <25 26>;
            layers = <DEF DEF_OSX DEF_QWE VIM>;
            bindings = <&tog VIM>;
        };
        combo_bsp {
            key-positions = <8 9>;
            // not needed in default or nav layers
            // conflicts with SYM layer "()"
            layers = <NUM FUN>;
            bindings = <&kp BSPC>;
        };
        combo_ent {
            key-positions = <32 33>;
            // conflicts with SYM layer "{}"
            layers = <DEF DEF_OSX DEF_QWE VIM NAV NAV_RGT NAV_OSX NUM FUN>;
            bindings = <&kp RET>;
        };
        combo_pluseq {
            key-positions = <15 30>;
            timeout-ms = <200>;
            layers = <SYM>;
            bindings = <&pluseq>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
// Colemak-DH
        default_layer {
            label = "DEF";
// -----------------------------------------------------------------------------------------
// |  TAB |  Q   |  W  |  F  |  P  |  B   |   |  J  |  L  |  U  |  Y  |  ;  | BKSP |
// |  ESC |  A   |  R  |  S  |  T  |  G   |   |  M  |  N  |  E  |  I  |  O  |  '   |
// | SHFT |Z/SHFT|  X  |  C  |  D  |  V   |   |  K  |  H  |  ,  |  .  |  /  | ESC  |
//            | CMD/CTRL | RPT/NAV | SHFT |   | SPC/NAV | SPC/SYM | BKSP/FUN |
            bindings = <
   &kp TAB   &kp Q       &kp W &kp F &kp P &kp B   &kp J &kp L  &kp U      &kp Y    &kp SEMI &kp BSPC
   &kp ESC   &kp A       &kp R &kp S &kp T &kp G   &kp M &kp N  &kp E      &kp I    &kp O    &kp SQT
   &kp LSHFT &mt LSHFT Z &kp X &kp C &kp D &kp V   &kp K &kp H  &comma_dqt &dot_sqt &kp FSLH &kp ESC
          &skht LCTRL LCMD &ltbr NAV 0 &sk LSHFT   &ltb NAV_RGT SPACE &ltb SYM SPACE &ltb FUN BSPC
            >;
        };

        default_osx_layer {
            label = "DX";
// -----------------------------------------------------------------------------------------
// |      |      |     |     |     |      |   |     |     |     |     |     |      |
// |      |      |     |     |     |      |   |     |     |     |     |     |      |
// |      |      |     |     |     |      |   |     |     |     |     |     |      |
//                     |     |     |      |   |     |     |     |
            bindings = <
   &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans
   &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans
   &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans
                        &trans &trans &trans &trans &trans &trans
            >;
        };

// Qwerty
        default_qwerty_layer {
            label = "QWE";
// -----------------------------------------------------------------------------------------
// |  TAB |  Q   |  W  |  E  |  R  |  T  |   |  Y  |  U  |  I  |  O  |  P  | BKSP |
// |  ESC |  A   |  S  |  D  |  F  |  G  |   |  H  |  J  |  K  |  L  |  ;  |  '   |
// | SHFT |Z/SHFT|  X  |  C  |  V  |  B  |   |  N  |  M  |  ,  |  .  |  /  | ESC  |
//                     |     |     |     |   |     |     |     |
            bindings = <
   &kp TAB   &kp Q       &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I     &kp O   &kp P    &kp BSPC
   &kp ESC   &kp A       &kp S &kp D &kp F &kp G   &kp H &kp J  &kp K     &kp L   &kp SEMI &kp SQT
   &kp LSHFT &mt LSHFT Z &kp X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &kp ESC
                            &trans &trans &trans   &trans &trans &trans
            >;
        };

        vim_layer {
            label = "VIM";
// -----------------------------------------------------------------------------------------
// |      |        |  W  |        | Preview |  B  |   | C-I | C-D | C-U | C-O |        |      |
// |      | A+EXIT |     | S+EXIT | Stage   |  G  |   |  H  |  J  |  K  |  L  | :+EXIT |      |
// |      |   U    | C-R | C+EXIT |  D      |  V  |   |     |  ]  |  [  |     | /+EXIT |      |
//                       |        |         |     |   |     | SPC+EXIT/SYM | EXIT |
            bindings = <
   &trans &trans         &kp W     &trans         &hunk_preview &kp B   &kp LC(I) &kp LC(D) &kp LC(U) &kp LC(O) &trans            &trans
   &trans &tog_vim_noc_A &trans    &tog_vim_noc_S &hunk_stage   &kp G   &kp H     &kp J     &kp K     &kp L     &tog_vim_COLON    &trans
   &trans &kp U          &kp LC(R) &tog_vim_noc_C &kp D         &kp V   &trans    &kp RBKT  &kp LBKT  &trans    &tog_vim_noc_FSLH &trans
                                                  &trans &trans &trans  &trans &lttogsp SYM VIM &tog VIM
            >;
        };

        nav_layer {
            label = "NAV";
// -----------------------------------------------------------------------------------------
// | TAB  | NEXT WIN | NEXT APP | TAB LFT | TAB RGT | NEW TAB |  | HOME | PGDN | PGUP | END | SCR LFT | BKSP |
// | ESC  | SHFT     | CTRL     | ALT     | CMD     | CLOSE   |  | LFT  | DWN  | UP   | RGT | ENT     |      |
// | SHFT | UNDO     | REDO     | COPY    | PASTE   | VIM     |  | BACK | DEL  |      | FWD | SCR RGT |      |
//                                     | SYS  |     |         |  |      | NUM  |      |
            bindings = <
   &kp TAB   &next_app_win &next_app &kp prev_tab  &kp next_tab  &kp new_tab   &kp HOME      &kp PG_DN &kp PG_UP &kp END       &kp prev_screen &kp BSPC
   &kp ESC   &sk LSHFT     &sk LCTRL &sk LALT      &sk LGUI      &kp close_win &kp LEFT      &kp DOWN  &kp UP    &kp RIGHT     &kp RET         &none
   &kp LSHFT &undo_w       &redo_q   &kp copy      &kp paste     &tog VIM      &kp prev_page &kp DEL   &trans    &kp next_page &kp next_screen &none
                                                         &sl SYS &trans &trans &trans &trans &trans
            >;
        };

        nav_right_layer {
            label = "NAV";
// -----------------------------------------------------------------------------------------
// | TAB  | NEXT WIN | NEXT APP | TAB LFT | TAB RGT | NEW TAB |  | HOME | PGDN | PGUP | END | SCR LFT | BKSP |
// | ESC  | SHFT     | CTRL     | ALT     | CMD     | CLOSE   |  | LFT  | DWN  | UP   | RGT | ENT     |      |
// | SHFT | UNDO     | REDO     | COPY    | PASTE   | VIM     |  | BACK | DEL  |      | FWD | SCR RGT |      |
//                                     | SYS  |     |         |  |      | NUM  |      |
            bindings = <
   &kp TAB   &next_app_win &next_app &kp prev_tab  &kp next_tab  &kp new_tab   &kp HOME      &kp PG_DN &kp PG_UP &kp END       &kp prev_screen &kp BSPC
   &kp ESC   &sk LSHFT     &sk LCTRL &sk LALT      &sk LGUI      &kp close_win &kp LEFT      &kp DOWN  &kp UP    &kp RIGHT     &kp RET         &none
   &kp LSHFT &undo_w       &redo_q   &kp copy      &kp paste     &tog VIM      &kp prev_page &kp DEL   &trans    &kp next_page &kp next_screen &none
                                                         &sl SYS &trans &trans &trans &trans &trans
            >;
        };

        nav_osx_layer {
            label = "NAV";
// -----------------------------------------------------------------------------------------
// |      |      |      |      |       | NEW TAB |  |      |      |      |      | SCR LFT |      |
// |      |      |      |      |       | CLOSE   |  |      |      |      |      |         |      |
// |      | UNDO | REDO | COPY | PASTE |         |  | BACK |      |      | FWD  | SCR RGT |      |
//                      |      |       |         |  |      |      |      |
            bindings = <
   &trans &trans      &trans      &trans       &trans        &kp new_tab_OSX    &trans            &trans &trans &trans            &kp prev_screen_OSX &trans
   &trans &trans      &trans      &trans       &trans        &kp close_win_OSX  &trans            &trans &trans &trans            &trans              &trans
   &trans &undo_w_osx &redo_q_osx &kp copy_OSX &kp paste_OSX &trans             &kp prev_page_OSX &trans &trans &kp next_page_OSX &kp next_screen_OSX &trans
                                               &trans &trans &trans             &trans &trans &trans
            >;
        };

        sym_layer {
            label = "SYM";
// -----------------------------------------------------------------------------------------
// |  TAB |  `  |  @  |  #  |  $  |  %  |   |  &  | "|" |  (  |  )  |  :  | BKSP |
// |  ESC |  ~  |  !  |  =  |  _  |Resrv|   |  -  |  \  |  [  |  ]  |  '  |  \   |
// | SHFT |  <  |  >  |  =  |Resrv|  ^  |   |  +  |  *  |  {  |  }  |  "  | "|"  |
//                    |     | NUM |     |   |     |     |     |
            bindings = <
   &kp  TAB  &kp GRAVE &kp AT   &kp HASH  &kp DLLR  &kp PRCNT &kp AMPS  &kp PIPE &kp LPAR &kp RPAR &kp COLON &kp BSPC
   &kp  ESC  &kp TILDE &kp EXCL &kp EQUAL &kp UNDER &trans    &kp MINUS &kp BSLH &kp LBKT &kp RBKT &kp SQT   &kp BSLH
   &kp LSHFT &kp LT    &kp GT   &kp EQUAL &trans    &kp CARET &kp PLUS  &kp STAR &kp LBRC &kp RBRC &kp DQT   &kp PIPE
                                &trans    &trans    &trans    &trans &trans &trans
            >;
        };

        num_layer {
            label = "NUM";
// -----------------------------------------------------------------------------------------
// |  TAB | SHFT| CTRL | ALT | CMD |  %  |   |  -  | CMD | CTRL| ALT | SHFT| BKSP |
// |  ESC |  6  |  4   |  2  |  0  |  8  |   |  9  |  1  |  3  |  5  |  7  |      |
// | SHFT |  <  |  >   |  =  | SPC |  ^  |   |  +  |  *  |  ,  |  .  |  /  |      |
//                     |     |     |     |   |     |     |     |
            bindings = <
   &kp TAB   &sk LSHFT &sk LCTRL &sk LALT  &sk LGUI  &kp PRCNT &kp MINUS &sk RGUI &sk RALT  &sk RCTRL &sk RSHFT &kp BSPC
   &kp ESC   &kp N6    &kp N4    &kp N2    &kp N0    &kp N8    &kp N9    &kp N1   &kp N3    &kp N5    &kp N7    &trans
   &kp LSHFT &kp LT    &kp GT    &kp EQUAL &kp SPACE &kp CARET &kp PLUS  &kp STAR &kp COMMA &kp DOT   &kp FSLH  &trans
                                 &trans    &trans    &trans    &trans    &trans   &trans
            >;
        };

        fun_layer {
            label = "FN";
// -----------------------------------------------------------------------------------------
// |  TAB | F6  | F4     | F2     | F10 | F8  |   | F9   | F1   | F3   | F5     | F7     | BKSP |
// |  ESC | SHFT| CTRL   | ALT    | CMD | F11 |   | F12  | CMD  | ALT  | CTRL   | SHFT   |      |
// | SHFT |     | BRI DN | BRI UP |     |     |   | PREV | PLAY | NEXT | VOL DN | VOL UP |      |
//                       |        |     |     |   | MUTE |      |      |
            bindings = <
   &kp TAB   &kp F6    &kp F4       &kp F2       &kp F10  &kp F8  &kp F9     &kp F1           &kp F3     &kp F5       &kp F7     &kp BSPC
   &kp ESC   &sk LSHFT &sk LCTRL    &sk LALT     &sk LGUI &kp F11 &kp F12    &sk RGUI         &sk RALT   &sk RCTRL    &sk RSHFT  &trans
   &kp LSHFT &trans    &kp C_BRI_DN &kp C_BRI_UP &trans   &trans  &kp C_PREV &kp C_PLAY_PAUSE &kp C_NEXT &kp C_VOL_DN &kp C_VOL_UP &trans
                                    &trans       &trans   &trans  &kp C_MUTE &trans &trans
            >;
        };

        mouse_layer {
            label = "MOU";
// -----------------------------------------------------------------------------------------
// |      |      |      |     |     | ACC 2 |   | SCL UP | SCL LFT | MOU UP | SCL RGT |      |      |
// |  ESC | SHFT | CTRL | ALT | CMD | ACC 1 |   | SCL DN | MOU LFT | MOU DN | MOU RGT |      |      |
// |      |      |      |     |     | ACC 0 |   |        | MOU 1   | MOU 2  |         |      |      |
//                      |     |     |       |   |        |         |        |
            bindings = <
   &trans  &trans    &trans    &trans   &trans   &trans &trans &trans &trans &trans &trans &trans
   &kp ESC &sk LSHFT &sk LCTRL &sk LALT &sk LGUI &trans &trans &trans &trans &trans &trans &trans
   &trans  &trans    &trans    &trans   &trans   &trans &trans &trans &trans &trans &trans &trans
                        &trans &trans &trans &trans &trans &trans
            >;
        };

        sys_layer {
            label = "SYS";
// -----------------------------------------------------------------------------------------
// |     |BTCLR|     | DEF        | DEF_OSX     | QWERTY |   |       |      |      |     |     |     |
// |     | BT3 | BT2 | PC connect | OSX connect | Reset  |   | Reset |      |      |     |     |     |
// |     | BT4 |     |            |             |        |   |       |      |      |     |     |     |
//                   |            |             |        |   |       |      |      |
            bindings = <
   &trans &bt BT_CLR   &trans       &to DEF     &to DEF_OSX   &tog DEF_QWE &trans     &trans &trans &trans &trans &trans
   &trans &bt BT_SEL 3 &bt BT_SEL 2 &pc_connect &osx_connect  &sys_reset   &sys_reset &trans &trans &trans &trans &trans
   &trans &bt BT_SEL 4 &trans       &trans      &trans &trans &trans       &trans &trans &trans &trans &trans
                                                &trans &trans &trans       &trans &trans &trans
            >;
        };
    };
};

// vi: ft=dts
